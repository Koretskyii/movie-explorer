// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  favorites Favorites[]
  reviews  Reviews[]
  watchlist Watchlist[]
}

// Movie model to store movie details for saving favorite movies or watchlist etc. (for future use)
model Movie {
  id             String           @id @default(uuid())
  title          String
  description    String?
  releaseDate    DateTime?
  rating         Float?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  favorites      Favorites[]
  MovieAndGenres MovieAndGenres[]
  reviews        Reviews[]
  watchlist      Watchlist[]
}

model Favorites {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

model MovieAndGenres {
  movieId String
  genreId String

  movie Movie  @relation(fields: [movieId], references: [id])
  genre Genres @relation(fields: [genreId], references: [id])

  @@unique([movieId, genreId])
}

model Genres {
  id   String @id @default(uuid())
  name String @unique

  movies MovieAndGenres[]
}

model Reviews {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}

// films to watch later
model Watchlist {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId])
}
